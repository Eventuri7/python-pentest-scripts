import argparse
import queue
import socket
import threading
from queue import Queue

def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', dest='ip', help='ip address')
    parser.add_argument('-m', dest='mode', help='mode: all or common')
    #parser.add_argument('-t', dest='threads', help='number of threads')
    options = parser.parse_args()

    if not options.ip:
        parser.error('[-] Please specify an ip address, use --help for more info')

    if not options.mode:
        parser.error('[-] Please specify mode, use --help for more info')

    return options

all_ports = range(1, 65535)
common_ports = [21, 22, 23, 53, 80, 135, 443, 445]
open_ports = []
queue = Queue()

def connect_to_port(target_ip, port, result = 1): 
    try: 
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        con = sock.connect_ex((target_ip, port))
        
        if con == 0:
            try:
                target_hostname = socket.gethostbyaddr(target_ip)[0]
            except:
                target_hostname = "get hostname failed"
            
            service = socket.getservbyport(port) 
            print(f"Open port on {target_ip} detected" + "\tPort: " + str(port) + "\tService: " + str(service) + " \tHostname: " + str(target_hostname))
            result = con 
        
        sock.close() 
    
    except Exception as e: 
        pass 
    
    return result

def grab_banner(target_ip, port):
    grab = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    grab.connect((target_ip, port))
    grab.send(b'GET HTTP/1.1 \r\n')
    banner = grab.recv(1024).decode()
    grab.close()
    print(f"Service information for port {port}: {banner}")

def get_ports(port_list):
    for port in port_list:
        queue.put(port)

def scan_ports(ip):    
    while not queue.empty():
        port = queue.get()
        response = connect_to_port(ip, port)
        if response == 0: 
            open_ports.append(port) 

def get_service_banners_for_host(target_ip, port_list):
    for port in port_list:
        grab_banner(target_ip, port)

def main(threads):
    command_args = get_args()
    thread_list = []

    if command_args.mode == "all":
        get_ports(all_ports)

        for t in range(threads):
            thread = threading.Thread(target=scan_ports, args=(command_args.ip,))
            thread_list.append(thread)

        for thread in thread_list:
            thread.start()

        for thread in thread_list:
            thread.join()

        get_service_banners_for_host(command_args.ip, open_ports)
    
    elif command_args.mode == "common":
        get_ports(common_ports)

        for t in range(threads):
            thread = threading.Thread(target=scan_ports, args=(command_args.ip,))
            thread_list.append(thread)

        for thread in thread_list:
            thread.start()

        for thread in thread_list:
            thread.join()
        
        get_service_banners_for_host(command_args.ip, open_ports)

main(100)